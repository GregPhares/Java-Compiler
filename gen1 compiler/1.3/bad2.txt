0001 
0002 module BadProg2;
	MODL | 	0015 | 	module
--> Entering Program
	IDNT | 	0050 | 	BadProg2
	SEMI | 	0036 | 	;
0003 
0004 (* This Part A test file should has one syntax error after the lexical truncation... should continue! *)
0005 
0006 begin
	BGIN | 	0011 | 	begin
 --> Entering Block
0007 { The only statements for Part A are ASSIGNMENTS with EXPRESSIONS - long number below }
0008 
0009 sum:=(27.1234567890123456 *first)+ 3.14*radius*radius; (* A long number; syntax flags it and keeps going. *)
	IDNT | 	0050 | 	sum
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
	ASGN | 	0037 | 	:=
    <-- Exiting Variable
	LPAR | 	0034 | 	(
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
The Float is greater than 12 char, it is being truncated 27.1234567890123456to 27.123456789
	FCNS | 	0052 | 	27.1234567890123456
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
          --> Entering UnsignedConstant
           --> Entering UnsignedNumber
	MULT | 	0031 | 	*
           <-- Exiting UnsignedNumber
          <-- Exiting UnsignedConstant
         <-- Exiting Factor
         --> Entering Mulop
	IDNT | 	0050 | 	first
         <-- Exiting Mulop
         --> Entering Factor
          --> Entering Variable
	RPAR | 	0035 | 	)
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	PLUS | 	0032 | 	+
      <-- Exiting Factor
     <-- Exiting Term
     --> Entering Addop
	FCNS | 	0052 | 	3.14
     <-- Exiting Addop
     --> Entering Term
      --> Entering Factor
       --> Entering UnsignedConstant
        --> Entering UnsignedNumber
	MULT | 	0031 | 	*
        <-- Exiting UnsignedNumber
       <-- Exiting UnsignedConstant
      <-- Exiting Factor
      --> Entering Mulop
	IDNT | 	0050 | 	radius
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	MULT | 	0031 | 	*
       <-- Exiting Variable
      <-- Exiting Factor
      --> Entering Mulop
	IDNT | 	0050 | 	radius
      <-- Exiting Mulop
      --> Entering Factor
       --> Entering Variable
	SEMI | 	0036 | 	;
       <-- Exiting Variable
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0010                                   
0011 a :=(a+c)* (b-d)                ;
	IDNT | 	0050 | 	a
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
	ASGN | 	0037 | 	:=
    <-- Exiting Variable
	LPAR | 	0034 | 	(
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
	IDNT | 	0050 | 	a
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	PLUS | 	0032 | 	+
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
        --> Entering Addop
	IDNT | 	0050 | 	c
        <-- Exiting Addop
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	RPAR | 	0035 | 	)
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	MULT | 	0031 | 	*
      <-- Exiting Factor
      --> Entering Mulop
	LPAR | 	0034 | 	(
      <-- Exiting Mulop
      --> Entering Factor
	IDNT | 	0050 | 	b
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	MINS | 	0033 | 	-
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
        --> Entering Addop
	IDNT | 	0050 | 	d
        <-- Exiting Addop
        --> Entering Term
         --> Entering Factor
          --> Entering Variable
	RPAR | 	0035 | 	)
          <-- Exiting Variable
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting SimpleExpression
	SEMI | 	0036 | 	;
      <-- Exiting Factor
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0012 (* There is a double ** error below *)
	MULT | 	0031 | 	*
  --> Entering Statement
ERROR: Expected Statement start but found *
  <-- Exiting Statement
ERROR: Expected END but found *
 <-- Exiting Block
ERROR: Expected . but found *
<-- Exiting Program
Done.
